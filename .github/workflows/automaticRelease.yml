name: Update Nuget Package

# only trigger on pull request closed events
on: pull_request

jobs:
  Publish_new_nuget_package:
    #uncomment the line below to make this job only run if the PR has been merged (NOTE: Requires on: pull_request: [closed])
    #if: ${{ !(contains( github.event.pull_request.labels.*.name, 'version change') || contains( github.event.pull_request.labels.*.name, 'no code changes')) && github.event.pull_request.merged == true }}
    runs-on: windows-latest
    steps:
      #- name: Check out the code
      #  uses: actions/checkout@v2

      #- uses: nuget/setup-nuget@v1.0.5

      #- name: Restore dependencies
      #  run: nuget restore DatabaseToolKit.sln

      #- name: Build main project
      #  run: dotnet build ./DatabaseBackupTool/DatabaseToolKit.csproj

      - name: get latest version
        shell: bash
        run: |
          getLatest=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/MonitoringSolutionsInc/DatabaseBackupTool/git/matching-refs/tags | grep -o 'v....."' | tail -n1)
          output="${getLatest:1:-1}"
          echo $output
          echo "bashVersion=$output" >> $GITHUB_ENV
      - name: update version - patch
        if: ${{ !(contains( github.event.pull_request.labels.*.name, 'version change') || contains( github.event.pull_request.labels.*.name, 'no code changes') || contains( github.event.pull_request.labels.*.name, 'minor update') || contains( github.event.pull_request.labels.*.name, 'major update')) }}
        shell: pwsh
        run: |
          [version]$version = '${{ env.bashVersion }}'
          echo $version
          [version]$NewVersion = [version]::new($Version.Major, $Version.Minor, ($Version.Build + 1))
          [string]$vstring = $NewVersion
          echo $vstring

      - name: update version - minor
        if: ${{ contains( github.event.pull_request.labels.*.name, 'minor update') }}
        shell: pwsh
        run: |
          [version]$version = '${{ env.bashVersion }}'
          echo $version
          [version]$NewVersion = [version]::new($Version.Major, ($Version.Minor + 1), $Version.Build)
          [string]$vstring = $NewVersion
          echo $vstring

      - name: update version - major
        if: ${{ contains( github.event.pull_request.labels.*.name, 'major update') }}
        shell: pwsh
        run: |
          [version]$version = '${{ env.bashVersion }}'
          echo $version
          [version]$NewVersion = [version]::new($Version.Major, $Version.Minor, ($Version.Build + 1))
          [string]$vstring = $NewVersion
          echo $vstring


  PR_close_no_merge:
    # this job will only run if the PR has been closed without being merged
    if: github.event.pull_request.merged == false
    runs-on: windows-latest
    steps:
    - run: |
        echo PR #${{ github.event.number }} has been closed without being merged
  PR_closed_or_merged_NO_PACKAGE_UPDATE:
    if: ${{ contains( github.event.pull_request.labels.*.name, 'version change') || contains( github.event.pull_request.labels.*.name, 'no code changes') }}  
    runs-on: windows-latest
    steps:
    - run: echo "Hello, if you are seeing this text that means the automatic version incremenet did not take place because of the labels attached to this pull request. Namely :no code changes, and version change"
