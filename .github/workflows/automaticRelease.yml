name: Automatically create a new release with updated tag

# only trigger on pull request closed events
on: pull_request

jobs:
  Auto_create_new_release:
    #uncomment the line below to make this job only run if the PR has been merged (NOTE: Requires on: pull_request: [closed])
    #if: ${{ !(contains( github.event.pull_request.labels.*.name, 'version change') || contains( github.event.pull_request.labels.*.name, 'no code changes')) && github.event.pull_request.merged == true }}
    runs-on: windows-latest
    env:
      FILENAME: DatabaseToolKit
      FOLDER: DatabaseBackupTool
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - uses: nuget/setup-nuget@v1.0.5

      - name: Setup nuget.config
        run: |
          nuget source Add -Name "MonSol" -Source "https://nuget.pkg.github.com/MonitoringSolutionsInc/index.json" -username "${{ secrets.ORGANIZATION_REPO_ACCESS_USERNAME }}" -password "${{ secrets.ORGANIZATION_REPO_ACCESS }}"          
          nuget setApiKey "${{ secrets.ORGANIZATION_REPO_ACCESS }}" -Source "MonSol"

      - name: Restore dependencies
        run: nuget restore ${{ env.FILENAME }}.sln

      - name: set path for needed output files
        run: |
          [string]$csprojFile = (Get-ChildItem -path ${{ github.workspace }}/${{ env.FOLDER }} -Filter *.csproj | Select-Object -First 1).fullname
          [xml]$xml = Get-Content -path $csprojFile -Raw
          $buildType = $xml.Project.PropertyGroup.Configuration.'#text' #returns debug or release
          foreach ($element in $xml.Project.PropertyGroup) {
            if ($element.Condition -match $buildType)
            {   $element.OutputPath= "bin\Release\"   } 
          } #now output is always here

      - name: Build main project
        run: dotnet build ./${{ env.FOLDER }}/${{ env.FILENAME }}.csproj
      
      - name: Zip needed files
        shell: pwsh
        run: |
          $path = "${{ github.workspace }}\${{ env.FOLDER }}\${{ env.buildFolder }}bin\Release\"
          [string]$FilesToZip = (Get-ChildItem -path ${{ github.workspace }}\${{ env.FOLDER }}\FilesToZip.xml).fullname
          [xml]$xml = Get-Content -path $FilesToZip -Raw
          foreach ($element in $xml.list.include){
            $listOfFiles += $path + $element + ", "
          }
          $listOfFiles = $listOfFiles.Substring(0, $listOfFiles.Length - 2 )
          echo $listOfFiles
          $compress = @{
            Path = "$listOfFiles"
            CompressionLevel = "Fastest"
            DestinationPath = "$path" + "${{ env.FOLDER }}" + ".zip"
          }
          Compress-Archive @compress
          ls "$path"

      - name: get latest version
        shell: bash
        run: |
          getLatest=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/MonitoringSolutionsInc/DatabaseBackupTool/git/matching-refs/tags | grep -o 'v....."' | tail -n1) 
          output="${getLatest:1:-1}"
          echo $output
          echo "bashVersion=$output" >> $GITHUB_ENV

      - name: update version - patch
        if: ${{ !(contains( github.event.pull_request.labels.*.name, 'version change') || contains( github.event.pull_request.labels.*.name, 'no code changes') || contains( github.event.pull_request.labels.*.name, 'minor update') || contains( github.event.pull_request.labels.*.name, 'major update')) }}
        shell: pwsh
        run: |
          [version]$version = '${{ env.bashVersion }}'
          echo $version
          [version]$NewVersion = [version]::new($Version.Major, $Version.Minor, ($Version.Build + 1))
          [string]$vstring = $NewVersion
          echo "newVersion=$vstring" >> $GITHUB_ENV
          echo "new version: $vstring"

      - name: update version - minor
        if: ${{ contains( github.event.pull_request.labels.*.name, 'minor update') }}
        shell: pwsh
        run: |
          [version]$version = '${{ env.bashVersion }}'
          echo $version
          [version]$NewVersion = [version]::new($Version.Major, ($Version.Minor + 1), $Version.Build)
          [string]$vstring = $NewVersion
          echo "newVersion=$vstring" >> $GITHUB_ENV

      - name: update version - major
        if: ${{ contains( github.event.pull_request.labels.*.name, 'major update') }}
        shell: pwsh
        run: |
          [version]$version = '${{ env.bashVersion }}'
          echo $version
          [version]$NewVersion = [version]::new($Version.Major, $Version.Minor, ($Version.Build + 1))
          [string]$vstring = $NewVersion
          echo "newVersion=$vstring" >> $GITHUB_ENV

      - name: Create new release
        if: false
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.newVersion }}
          release_name: Database Backup and Restore Tool
          body: |
            This release was created automatically though GitHub Actions.
            Download DatabaseBackupTool.zip 
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: false
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./my-artifact.zip
          asset_name: my-artifact.zip
          asset_content_type: application/zip


  PR_close_no_merge:
    # this job will only run if the PR has been closed without being merged
    if: github.event.pull_request.merged == false
    runs-on: windows-latest
    steps:
    - run: |
        echo PR #${{ github.event.number }} has been closed without being merged
  PR_closed_or_merged_NO_PACKAGE_UPDATE:
    if: ${{ contains( github.event.pull_request.labels.*.name, 'version change') || contains( github.event.pull_request.labels.*.name, 'no code changes') }}  
    runs-on: windows-latest
    steps:
    - run: echo "Hello, if you are seeing this text that means the automatic version incremenet did not take place because of the labels attached to this pull request. Namely :no code changes, and version change"
